#1.a):

def factorial(n):
  if n==0 or n==1:
    return 1
  else:
    return n*factorial(n-1)

n=int(input("Enter a number: "))
print("Factorial of",n,"=",factorial(n))

#1.b):

def fibonacci(n):
  if n<2:
    return n
  else:
    return fibonacci(n-2)+fibonacci(n-1)


nums=int(input("Enter the number sequence: "))
print("Fibonacci sequence for",nums)
for i in range(nums):
  print(fibonacci(i))


#1.c):

def arrayprint(lt,idx):
   if len(lt)==idx:
     return
   else: 
     print(lt[idx])
     arrayprint(lt,idx+1)


i=0
arrayprint([1,2,3,4,5],i)

#1.d):

def powerN(base,n):
  if n==0:
    return 1
  else:
    return base*powerN(base,n-1)

print(powerN(3,3))

#2.a):

def d_to_b(decimal):
  if decimal==0:
    return
  else:   
    d_to_b(int(decimal/2))
    print(str(decimal%2),end="")
    


d_to_b(15)

#2.b):
class Node:
  def __init__(self,element,next):
    self.element=element 
    self.next=next
class LL:
  def __init__(self, a):
    self.head=None 
    tail=None 
    for i in a:
        n=Node(i, None)
        if self.head==None:
          self.head=n
          tail=n
        else:
          tail.next=n
          tail=n  
  def sum(self,num):
    if num==None:
      return 0
    else:
      return num.element +self.sum(num.next)


l1=LL([1,2,3,4,5])
print(l1.sum(l1.head))

#2.c):

class Node:
  def __init__(self,element, next):
    self.element=element
    self.next=next


class LL:
  def __init__(self, a):
    self.head=None 
    tail=None 
    for i in a:
        n = Node(i,None)
        if self.head==None:
          self.head=n
          tail=n
        else:
          tail.next=n
          tail=n

def reverse_list(num):
    if num!=None:
        reverse_list(num.next)
        print(num.element)


l1=LL([1,2,3,4,5])
reverse_list(l1.head)

#3:

def hocBuilder(height):
    cards=8
    if height<=0:
        return "No house built"
    elif height==1:
        return cards
    else:
      c=height-1
      hocBuilder(c)
      cards=cards+5*(c)
      return cards

print(hocBuilder(3))

#4.a):

def patternprint(n):
    p=1
    l=1
    if n!=0:
      patternprint(n-1)
      while l<=n:
          print(p,end=" ")
          p=p+1
          l=l+1
      print()

d=int(input("Enter a number: "))
patternprint(d)

#4.b):

def patternprint(n):
   p=1
   l=1
   if n!=0:
      patternprint(n-1)
      while l<=n:
        for j in range(n-i-1):
          print(" ",end=" ")
        print(p,end=" ")
        p=p+1
        l=l+1
      print()
      


d=int(input("Enter a number: "))
patternprint(d)


#5:

class FinalQ: 
    def print(self,array,idx):
        self.idx=idx
        if (idx<len(array)): 
            profit = self.calcProfit(array[idx])
            self.idx=self.idx+1  
    def calcProfit(self,investment): 
        if investment<100000:
            set_up=investment-25000
            if set_up==0:
                print("Investment:",investment,";","Profit:",0.0)
            else:
                pm=(4.5/100)/(4.5/100)**2
                p=set_up/pm
                print("Investment:",investment,";","Profit:",p)
        else:
            set_up=investment-25000
            if set_up==0:
                print("Investment:",investment,";","Profit:",0.0)
            else:
                pm=(4.5/100)/(4.5/100)**2
                p=75000/pm
                pm2=(8/100)/(8/100)**2
                pm3=(set_up-75000)/pm2
                p2=p+pm3
                print("Investment:",investment,";","Profit:",p2)
           
array=[25000,100000,250000,350000] 
f=FinalQ()
for i in range(4): 
  f.print(array,i)