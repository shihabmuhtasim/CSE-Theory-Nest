#Task 1:

class Stack:
  def __init__(self):
    self.stack=[]
    self.pointer=-1
  def push(self,element):
    self.stack+=element
    self.pointer+=1
  def peek(self):
    if self.pointer!=-1:
      return(self.stack[self.pointer])
    else:
      return None
  def pop(self):
    value=self.stack[self.pointer]
    self.stack=self.stack[:-1]
    self.pointer-=1 
    return(value)
  def bracketcheck(self,s):
    f=True
    stack2=[]
    # for j in s:
    #   c+=1
    # print(c)   
    # #print(s)
    for i in s:
      if i=="(" or i=="{" or i=="[":
        stack1.push(i)
    #print(self.stack)
      elif i==")":
        if stack1.peek()=="(":
         stack1.pop() 
        elif stack1.peek()==None:
          f=False
      elif i=="]":
         if stack1.peek()=="[":
           stack1.pop()
         elif stack1.peek()==None:
          f=False            
      elif i=="}":
         if stack1.peek()=="{":
           stack1.pop()
         elif stack1.peek()==None:
          f=False
      # elif i==")" or i=="}" or i =="]":
    #   if stack1.peek=="No elements":
      #     f=False 
    #print(f)
    #print(self.stack)       
    #print(self.pointer)
    if self.stack==[]:
         print("The expression is correct.")
    elif self.stack!=[] or f==False:
         print("The expression is NOT correct.")
         for j in range(len(s)):
           if s[j]==self.stack[self.pointer]:
             #print(j+1)
             #print(self.stack[self.pointer])
             print("Error at character #",j+1,".",self.stack[self.pointer],"- not closed.")
        



stack1=Stack()
stack1.bracketcheck("1+2]*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14")


#Task 2:

class Node:
  def __init__(self,element,next):
    self.element=element
    self.next=next

class Stack:
  def __init__(self):
    self.head=None
  def push(self,data):
    if self.head==None:
      self.head=Node(data,None)
    else:
      n=Node(data,None)
      n.next=self.head
      self.head=n
  def peek(self):
    if self.head!=None:
      return(self.head.element)
    else:
      return None
  def pop(self):
    temp=self.head
    self.head=self.head.next
    temp.element=None
    temp.next=None
  def bracketcheck(self,s):
    #print(s)
    f=True
    for i in s:
      if i=="(" or i=="{" or i=="[":
        stack.push(i)
      elif i==")":
        if stack.peek()=="(":
          stack.pop()
        elif stack1.peek()==None:
          f=False
      elif i=="}":
        if stack.peek()=="{":
          stack.pop()
        elif stack1.peek()==None:
          f=False
      elif i=="]":
        if stack.peek()=="[":
          stack.pop()
        elif stack1.peek()==None:
          f=False
    if self.head==None:
        print("The expression is correct.")
    elif self.head!=None or f==False:
        print("The expression is Not correct.")
        for j in range(len(s)):
          if s[j]==self.head.element:
            print("Error at character #",j+1,".",self.head.element,"- not closed.")
            
          

 
stack=Stack()
stack.bracketcheck("1+2*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14")

